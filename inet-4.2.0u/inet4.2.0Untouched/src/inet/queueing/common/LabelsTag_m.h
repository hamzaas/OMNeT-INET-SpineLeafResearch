//
// Generated file, do not edit! Created by nedtool 5.6 from inet/queueing/common/LabelsTag.msg.
//

#ifndef __INET_LABELSTAG_M_H
#define __INET_LABELSTAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class LabelsTag;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase


namespace inet {

/**
 * Class generated from <tt>inet/queueing/common/LabelsTag.msg:24</tt> by nedtool.
 * <pre>
 * class LabelsTag extends TagBase
 * {
 *     string labels[];
 * }
 * </pre>
 */
class INET_API LabelsTag : public ::inet::TagBase
{
  protected:
    omnetpp::opp_string *labels = nullptr;
    size_t labels_arraysize = 0;

  private:
    void copy(const LabelsTag& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LabelsTag&);

  public:
    LabelsTag();
    LabelsTag(const LabelsTag& other);
    virtual ~LabelsTag();
    LabelsTag& operator=(const LabelsTag& other);
    virtual LabelsTag *dup() const override {return new LabelsTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setLabelsArraySize(size_t size);
    virtual size_t getLabelsArraySize() const;
    virtual const char * getLabels(size_t k) const;
    virtual void setLabels(size_t k, const char * labels);
    virtual void insertLabels(const char * labels);
    virtual void insertLabels(size_t k, const char * labels);
    virtual void eraseLabels(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LabelsTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LabelsTag& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_LABELSTAG_M_H

